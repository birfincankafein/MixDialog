apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

// for Bintray
def projectVersionCode = Integer.parseInt(projectVersionCode);
def libGit = libGit
def libUrl = libUrl
def libDescription = libDescription
def libGroupId = libGroupId
def libArtifactId = libArtifactId

// for Maven
group = libGroupId
version = projectVersionName

android {
    compileSdkVersion 27
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 27
        versionCode projectVersionCode
        versionName projectVersionName
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

install {
    repositories.mavenInstaller {
        pom.project {
            name libArtifactId
            description libDescription
            url libUrl
            inceptionYear '2018'

            packaging 'aar'
            groupId libGroupId
            artifactId libArtifactId
            version projectVersionName

            licenses {
                license {
                    name 'Apache-2.0'
                    url libLicenseUrl
                }
            }
        }
    }
}

bintray {
    user = bintray_user
    key = bintray_apikey
    pkg {
        repo = libGroupId
        name = libArtifactId
        licenses = ['Apache-2.0']
        vcsUrl = libGit
        version {
            name = projectVersionName
            gpg {
                sign = true
                passphrase = bintray_gpg_passphrase
            }
        }
    }
    configurations = ['archives']
}

dependencies {
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support:support-annotations:27.1.1'
    implementation 'com.android.support:support-v4:27.1.1'
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompile
    task.from variant.javaCompile.destinationDir
    artifacts.add('archives', task);
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    options.charSet = 'UTF-8'
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}